@page "/addshop"
@using System.Net.Http.Json;
@using Estore.Shared.Models
@using Estore.Client.Services
@using Estore.Shared

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject CustomStateProvider authStateProvider
@attribute [Authorize]

    <div class="card">
        <div class="card-header">
            <h1>Add New Shop</h1>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <EditForm Model="@shop" OnValidSubmit="@CreateShop">

                        <div class="form-group">
                            <label for="Name" class="sr-only">Name</label>
                            <InputText id="Name" class="form-control" placeholder="Shop Name" autofocus @bind-Value="shop.Name"></InputText>

                        </div>

                        <div class="form-group">
                            <label for="Address" class="control-label">Address</label>
                            <InputTextArea @bind-Value="shop.Address"></InputTextArea>




                        </div>




                        <div class="form-group">
                            <button type="submit" class="btn btn-success">Save</button>
                            <button class="btn btn-default" @onclick="@cancel">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    @functions {


        Shop shop = new Shop();
        string currentuserid = "";

        protected override async Task OnInitializedAsync()
        {

            try
            {
                CurrentUser userdata = await authStateProvider.GetCurrentUser();
                currentuserid = userdata.Claims["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"].ToString();

            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }


        }
        async Task CreateShop()
        {
            shop.UserId = currentuserid;

            await Http.PostAsJsonAsync("/api/shops/Create", shop);
            UriHelper.NavigateTo("/shopsList");


        }
        void cancel()
        {
            UriHelper.NavigateTo("/shopsList");
        }
    }
